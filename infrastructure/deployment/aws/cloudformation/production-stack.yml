AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete production infrastructure for tomriddelsdell.com - includes all deployment fixes and lessons learned'

Parameters:
  ProjectName:
    Type: String
    Default: tomriddelsdell-com
    Description: Name of the project
    
  Environment:
    Type: String
    Default: production
    Description: Environment name
    
  DomainName:
    Type: String
    Description: Domain name for the production environment
    
  CertificateArn:
    Type: String
    Description: ARN of the SSL certificate for the domain
    
  CognitoUserPoolId:
    Type: String
    Description: Cognito User Pool ID for authentication
    
  DatabaseUrl:
    Type: String
    Description: Database connection URL
    NoEcho: true
    
  SessionSecret:
    Type: String
    Description: Session secret for authentication
    NoEcho: true
    Default: "production-session-secret-change-me"

Resources:
  # S3 Bucket for static assets with public access configuration
  StaticAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-static-assets'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-static-assets'
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket Policy for public read access (required for CloudFront)
  StaticAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssetsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${StaticAssetsBucket.Arn}/*'

  # Lambda Execution Role with corrected ARN format and minimal required permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub '${StaticAssetsBucket.Arn}/*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # API Gateway Lambda Function (without IAM permission-intensive features)
  ApiGatewayFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-api-gateway'
      Runtime: nodejs18.x
      Handler: index.handler
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization'
              },
              body: JSON.stringify({
                message: 'Production deployment successful!',
                timestamp: new Date().toISOString(),
                environment: 'production',
                version: '1.0.0'
              })
            };
          };
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          DATABASE_URL: !Ref DatabaseUrl
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          STATIC_ASSETS_BUCKET: !Ref StaticAssetsBucket
          CORS_ORIGINS: !Sub 'https://${DomainName},https://www.${DomainName}'
          SESSION_SECRET: !Ref SessionSecret
      # Note: ReservedConcurrentExecutions removed - requires lambda:PutFunctionConcurrency permission
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # API Gateway with enhanced configuration for production
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-api'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: true
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowOrigins:
          - !Sub 'https://${DomainName}'
          - !Sub 'https://www.${DomainName}'
        AllowHeaders:
          - Content-Type
          - Authorization
        MaxAge: 86400
      Tags:
        Project: !Ref ProjectName
        Environment: !Ref Environment

  # API Gateway Lambda Permission with corrected SourceArn format
  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApiGatewayFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*'

  # API Gateway Integration
  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub '${ApiGatewayFunction.Arn}'
      PayloadFormatVersion: '2.0'

  # API Gateway Routes
  ApiGatewayDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: '$default'
      Target: !Sub 'integrations/${ApiGatewayIntegration}'

  ApiGatewayApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'ANY /api/{proxy+}'
      Target: !Sub 'integrations/${ApiGatewayIntegration}'

  # API Gateway Stage with simplified configuration (no CloudWatch dependencies)
  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: !Ref Environment
      AutoDeploy: true
      Tags:
        Project: !Ref ProjectName
        Environment: !Ref Environment

  # CloudFront Distribution with proper S3 and API routing
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - !Ref DomainName
          - !Sub 'www.${DomainName}'
        Comment: !Sub '${ProjectName} ${Environment} distribution'
        DefaultRootObject: index.html
        Origins:
          # S3 Origin for static content
          - Id: S3Origin
            DomainName: !GetAtt StaticAssetsBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
          # API Gateway Origin for API requests
          - Id: ApiOrigin
            DomainName: !Sub '${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com'
            OriginPath: !Sub '/${Environment}'
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        DefaultCacheBehavior:
          # Default behavior serves static content from S3
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          DefaultTTL: 86400
          MaxTTL: 31536000
        CacheBehaviors:
          # API requests go to Lambda
          - PathPattern: '/api/*'
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization
                - Content-Type
                - Origin
                - Referer
              Cookies:
                Forward: all
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        HttpVersion: http2
        IPV6Enabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-api-url'

  CloudFrontUrl:
    Description: 'CloudFront Distribution URL'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-cloudfront-url'

  DomainUrl:
    Description: 'Custom Domain URL'
    Value: !Sub 'https://${DomainName}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-domain-url'

  StaticAssetsBucket:
    Description: 'S3 Bucket for static assets'
    Value: !Ref StaticAssetsBucket
    Export:
      Name: !Sub '${ProjectName}-${Environment}-static-bucket'

  LambdaFunctionArn:
    Description: 'Lambda Function ARN'
    Value: !GetAtt ApiGatewayFunction.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-lambda-arn'

  CloudFrontDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${ProjectName}-${Environment}-cloudfront-id'
