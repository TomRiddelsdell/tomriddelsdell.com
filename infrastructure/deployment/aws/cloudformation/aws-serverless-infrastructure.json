{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "tomriddelsdell.com - Serverless Infrastructure with DDD Architecture",
  "Parameters": {
    "ProjectName": {
      "Type": "String",
      "Default": "tomriddelsdell-com",
      "Description": "Project name for resource naming"
    },
    "Environment": {
      "Type": "String",
      "Default": "production",
      "AllowedValues": ["development", "staging", "production"],
      "Description": "Deployment environment"
    },
    "DomainName": {
      "Type": "String",
      "Default": "tomriddelsdell.com",
      "Description": "Primary domain name"
    },
    "CertificateArn": {
      "Type": "String",
      "Description": "SSL Certificate ARN for CloudFront (must be in us-east-1)"
    },
    "CognitoUserPoolId": {
      "Type": "String",
      "Description": "Existing Cognito User Pool ID"
    },
    "DatabaseUrl": {
      "Type": "String",
      "NoEcho": true,
      "Description": "Database connection string (Neon or RDS)"
    }
  },
  "Resources": {
    "S3FrontendBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Sub": "${ProjectName}-frontend-${Environment}"
        },
        "WebsiteConfiguration": {
          "IndexDocument": "index.html",
          "ErrorDocument": "index.html"
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": false,
          "BlockPublicPolicy": false,
          "IgnorePublicAcls": false,
          "RestrictPublicBuckets": false
        },
        "Tags": [
          {
            "Key": "Project",
            "Value": {"Ref": "ProjectName"}
          },
          {
            "Key": "Environment",
            "Value": {"Ref": "Environment"}
          },
          {
            "Key": "Component",
            "Value": "Frontend"
          }
        ]
      }
    },
    "S3FrontendBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {"Ref": "S3FrontendBucket"},
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {"Fn::Sub": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}"}
              },
              "Action": "s3:GetObject",
              "Resource": {"Fn::Sub": "${S3FrontendBucket}/*"}
            }
          ]
        }
      }
    },
    "CloudFrontOAI": {
      "Type": "AWS::CloudFront::OriginAccessIdentity",
      "Properties": {
        "OriginAccessIdentityConfig": {
          "Comment": {"Fn::Sub": "OAI for ${ProjectName} frontend"}
        }
      }
    },
    "CloudFrontDistribution": {
      "Type": "AWS::CloudFront::Distribution",
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            {"Ref": "DomainName"},
            {"Fn::Sub": "www.${DomainName}"}
          ],
          "Origins": [
            {
              "Id": "S3Origin",
              "DomainName": {"Fn::GetAtt": ["S3FrontendBucket", "RegionalDomainName"]},
              "S3OriginConfig": {
                "OriginAccessIdentity": {"Fn::Sub": "origin-access-identity/cloudfront/${CloudFrontOAI}"}
              }
            },
            {
              "Id": "APIOrigin",
              "DomainName": {"Fn::Sub": "${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"},
              "CustomOriginConfig": {
                "HTTPPort": 443,
                "OriginProtocolPolicy": "https-only"
              },
              "OriginPath": "/prod"
            }
          ],
          "DefaultCacheBehavior": {
            "TargetOriginId": "S3Origin",
            "ViewerProtocolPolicy": "redirect-to-https",
            "AllowedMethods": ["GET", "HEAD", "OPTIONS"],
            "CachedMethods": ["GET", "HEAD"],
            "ForwardedValues": {
              "QueryString": false,
              "Cookies": {"Forward": "none"}
            },
            "Compress": true
          },
          "CacheBehaviors": [
            {
              "PathPattern": "/api/*",
              "TargetOriginId": "APIOrigin",
              "ViewerProtocolPolicy": "redirect-to-https",
              "AllowedMethods": ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"],
              "CachedMethods": ["GET", "HEAD"],
              "ForwardedValues": {
                "QueryString": true,
                "Headers": ["Authorization", "Content-Type"],
                "Cookies": {"Forward": "all"}
              },
              "TTL": 0
            }
          ],
          "Enabled": true,
          "DefaultRootObject": "index.html",
          "CustomErrorResponses": [
            {
              "ErrorCode": 404,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html"
            }
          ],
          "ViewerCertificate": {
            "AcmCertificateArn": {"Ref": "CertificateArn"},
            "SslSupportMethod": "sni-only",
            "MinimumProtocolVersion": "TLSv1.2_2021"
          },
          "PriceClass": "PriceClass_100"
        },
        "Tags": [
          {
            "Key": "Project",
            "Value": {"Ref": "ProjectName"}
          },
          {
            "Key": "Environment",
            "Value": {"Ref": "Environment"}
          }
        ]
      }
    },
    "ApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {"Fn::Sub": "${ProjectName}-api-${Environment}"},
        "Description": "DDD Architecture API Gateway",
        "EndpointConfiguration": {
          "Types": ["REGIONAL"]
        },
        "Tags": [
          {
            "Key": "Project",
            "Value": {"Ref": "ProjectName"}
          },
          {
            "Key": "Environment",
            "Value": {"Ref": "Environment"}
          }
        ]
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {"Fn::Sub": "${ProjectName}-lambda-role-${Environment}"},
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "CognitoAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:AdminGetUser",
                    "cognito-idp:AdminListGroupsForUser",
                    "cognito-idp:GetUser"
                  ],
                  "Resource": {"Fn::Sub": "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"}
                }
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "Project",
            "Value": {"Ref": "ProjectName"}
          }
        ]
      }
    },
    "ApiLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": {"Fn::Sub": "${ProjectName}-api-${Environment}"},
        "Runtime": "nodejs18.x",
        "Handler": "index.handler",
        "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]},
        "Code": {
          "ZipFile": "exports.handler = async (event) => { return { statusCode: 200, body: JSON.stringify({ message: 'Deployment placeholder' }) }; };"
        },
        "Environment": {
          "Variables": {
            "NODE_ENV": {"Ref": "Environment"},
            "DATABASE_URL": {"Ref": "DatabaseUrl"},
            "COGNITO_USER_POOL_ID": {"Ref": "CognitoUserPoolId"},
            "AWS_REGION": {"Ref": "AWS::Region"}
          }
        },
        "Timeout": 30,
        "MemorySize": 512,
        "Tags": [
          {
            "Key": "Project",
            "Value": {"Ref": "ProjectName"}
          },
          {
            "Key": "Environment",
            "Value": {"Ref": "Environment"}
          },
          {
            "Key": "Component",
            "Value": "API"
          }
        ]
      }
    },
    "ApiGatewayProxyResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "ApiGateway"},
        "ParentId": {"Fn::GetAtt": ["ApiGateway", "RootResourceId"]},
        "PathPart": "{proxy+}"
      }
    },
    "ApiGatewayProxyMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "ApiGateway"},
        "ResourceId": {"Ref": "ApiGatewayProxyResource"},
        "HttpMethod": "ANY",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambdaFunction.Arn}/invocations"}
        }
      }
    },
    "LambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {"Ref": "ApiLambdaFunction"},
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"}
      }
    },
    "ApiGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["ApiGatewayProxyMethod"],
      "Properties": {
        "RestApiId": {"Ref": "ApiGateway"},
        "StageName": "prod"
      }
    },
    "Route53RecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {"Fn::Sub": "${DomainName}."},
        "Name": {"Ref": "DomainName"},
        "Type": "A",
        "AliasTarget": {
          "DNSName": {"Fn::GetAtt": ["CloudFrontDistribution", "DomainName"]},
          "HostedZoneId": "Z2FDTNDATAQYW2"
        }
      }
    },
    "Route53WWWRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {"Fn::Sub": "${DomainName}."},
        "Name": {"Fn::Sub": "www.${DomainName}"},
        "Type": "A",
        "AliasTarget": {
          "DNSName": {"Fn::GetAtt": ["CloudFrontDistribution", "DomainName"]},
          "HostedZoneId": "Z2FDTNDATAQYW2"
        }
      }
    }
  },
  "Outputs": {
    "CloudFrontDistributionId": {
      "Description": "CloudFront Distribution ID",
      "Value": {"Ref": "CloudFrontDistribution"},
      "Export": {
        "Name": {"Fn::Sub": "${ProjectName}-${Environment}-CloudFrontId"}
      }
    },
    "CloudFrontDomainName": {
      "Description": "CloudFront Distribution Domain Name",
      "Value": {"Fn::GetAtt": ["CloudFrontDistribution", "DomainName"]},
      "Export": {
        "Name": {"Fn::Sub": "${ProjectName}-${Environment}-CloudFrontDomain"}
      }
    },
    "S3BucketName": {
      "Description": "S3 Bucket for Frontend",
      "Value": {"Ref": "S3FrontendBucket"},
      "Export": {
        "Name": {"Fn::Sub": "${ProjectName}-${Environment}-S3Bucket"}
      }
    },
    "ApiGatewayUrl": {
      "Description": "API Gateway URL",
      "Value": {"Fn::Sub": "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"},
      "Export": {
        "Name": {"Fn::Sub": "${ProjectName}-${Environment}-ApiUrl"}
      }
    },
    "LambdaFunctionName": {
      "Description": "Lambda Function Name",
      "Value": {"Ref": "ApiLambdaFunction"},
      "Export": {
        "Name": {"Fn::Sub": "${ProjectName}-${Environment}-LambdaFunction"}
      }
    }
  }
}
