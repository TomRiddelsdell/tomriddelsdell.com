name: Deploy Landing Page

on:
  push:
    branches:
      - develop
      - main
    paths:
      - 'apps/landing-page/**'
      - 'packages/observability-edge/**'
      - '.github/workflows/deploy-landing-page.yml'
  pull_request:
    branches:
      - develop
      - main
    paths:
      - 'apps/landing-page/**'
      - 'packages/observability-edge/**'
      - '.github/workflows/deploy-landing-page.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "22"
  PNPM_VERSION: "10"

jobs:
  # Quality gates for landing page
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/landing-page
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: apps/landing-page/pnpm-lock.yaml

      - name: Build shared dependencies
        run: |
          echo "Building @platform/observability-edge package..."
          cd packages/observability-edge
          pnpm install
          pnpm run build
        working-directory: ${{ github.workspace }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run type-check

      - name: Lint
        run: pnpm run lint

      - name: Unit tests
        run: pnpm run test:unit
        env:
          CI: true

      - name: Build test
        run: pnpm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENV: staging

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-gates
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.tomriddelsdell.com
    defaults:
      run:
        working-directory: apps/landing-page
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: apps/landing-page/pnpm-lock.yaml

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Build shared dependencies
        run: |
          echo "Building @platform/observability-edge package..."
          cd packages/observability-edge
          pnpm install
          pnpm run build
        working-directory: ${{ github.workspace }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for staging
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_STG }}
        run: |
          doppler run --project tomriddelsdell-infra --config stg -- pnpm run build:staging

      - name: Deploy to Cloudflare Pages (Staging)
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_STG }}
        run: |
          echo "üßπ Removing cache directory to meet Cloudflare Pages 25 MiB file size limit..."
          rm -rf .next/cache
          
          echo "üöÄ Deploying to Cloudflare Pages (staging)..."
          doppler run --project tomriddelsdell-infra --config stg -- \
            pnpm exec wrangler pages deploy .next \
              --project-name=landing-page \
              --branch=develop \
              --commit-dirty=true

      - name: Wait for DNS propagation
        run: |
          echo "‚è≥ Waiting for deployment to propagate..."
          sleep 30

      - name: Health check staging
        run: |
          echo "üè• Checking staging deployment health..."
          MAX_ATTEMPTS=10
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://staging.tomriddelsdell.com || echo "000")
            
            # Accept 200 (OK) or 302 (Redirect to Cloudflare Access)
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "302" ]; then
              echo "‚úÖ Staging site is healthy (HTTP $HTTP_CODE)"
              exit 0
            elif [ "$HTTP_CODE" = "000" ]; then
              echo "‚ö†Ô∏è  Unable to connect, retrying..."
            else
              echo "‚ö†Ô∏è  Received HTTP $HTTP_CODE, retrying..."
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            [ $ATTEMPT -le $MAX_ATTEMPTS ] && sleep 10
          done
          
          echo "‚ùå Health check failed after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "## üöÄ Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://staging.tomriddelsdell.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** develop" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Staging Site](https://staging.tomriddelsdell.com)" >> $GITHUB_STEP_SUMMARY
          echo "- [Cloudflare Dashboard](https://dash.cloudflare.com)" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Staging deployment failed. Check the logs above for details."

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: quality-gates
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment:
      name: production
      url: https://tomriddelsdell.com
    defaults:
      run:
        working-directory: apps/landing-page
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: apps/landing-page/pnpm-lock.yaml

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Build shared dependencies
        run: |
          echo "Building @platform/observability-edge package..."
          cd packages/observability-edge
          pnpm install
          pnpm run build
        working-directory: ${{ github.workspace }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for production
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PROD }}
        run: |
          doppler run --project tomriddelsdell-infra --config prd -- pnpm run build:production

      - name: Deploy to Cloudflare Pages (Production)
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PROD }}
        run: |
          echo "üßπ Removing cache directory to meet Cloudflare Pages 25 MiB file size limit..."
          rm -rf .next/cache
          
          echo "üöÄ Deploying to Cloudflare Pages (production)..."
          doppler run --project tomriddelsdell-infra --config prd -- \
            pnpm exec wrangler pages deploy .next \
              --project-name=landing-page \
              --branch=main \
              --commit-dirty=true

      - name: Wait for DNS propagation
        run: |
          echo "‚è≥ Waiting for deployment to propagate..."
          sleep 30

      - name: Health check production
        run: |
          echo "üè• Checking production deployment health..."
          MAX_ATTEMPTS=10
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://tomriddelsdell.com || echo "000")
            
            # Accept 200 (OK) or 302 (Redirect to Cloudflare Access)
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "302" ]; then
              echo "‚úÖ Production site is healthy (HTTP $HTTP_CODE)"
              exit 0
            elif [ "$HTTP_CODE" = "000" ]; then
              echo "‚ö†Ô∏è  Unable to connect, retrying..."
            else
              echo "‚ö†Ô∏è  Received HTTP $HTTP_CODE, retrying..."
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            [ $ATTEMPT -le $MAX_ATTEMPTS ] && sleep 10
          done
          
          echo "‚ùå Health check failed after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Smoke tests
        run: |
          echo "üß™ Running production smoke tests..."
          
          # Test homepage is accessible
          URL="https://tomriddelsdell.com"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ $URL is accessible"
          else
            echo "‚ùå $URL returned HTTP $HTTP_CODE"
            exit 1
          fi
          
          echo "‚úÖ All smoke tests passed"

      - name: Deployment summary
        if: always()
        run: |
          echo "## üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://tomriddelsdell.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** main" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Production Site](https://tomriddelsdell.com)" >> $GITHUB_STEP_SUMMARY
          echo "- [Cloudflare Dashboard](https://dash.cloudflare.com)" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Production deployment failed. Check the logs above for details."
          echo "::error::Consider rolling back to previous deployment if necessary."

  # Post-deployment verification with comprehensive monitoring
  post-deploy-checks:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Make scripts executable
        run: |
          # Install bc for performance calculations
          sudo apt-get update && sudo apt-get install -y bc
          chmod +x apps/landing-page/scripts/*.sh

      - name: Comprehensive staging health check
        if: needs.deploy-staging.result == 'success'
        run: |
          echo "üè• Running comprehensive staging health check..."
          cd apps/landing-page
          ./scripts/health-check.sh https://staging.tomriddelsdell.com

      - name: Comprehensive production health check
        if: needs.deploy-production.result == 'success'
        run: |
          echo "üè• Running comprehensive production health check..."
          cd apps/landing-page
          ./scripts/health-check.sh https://tomriddelsdell.com

      - name: Performance monitoring - staging
        if: needs.deploy-staging.result == 'success'
        run: |
          echo "‚ö° Measuring staging performance..."
          cd apps/landing-page
          ./scripts/performance-check.sh https://staging.tomriddelsdell.com || true

      - name: Performance monitoring - production
        if: needs.deploy-production.result == 'success'
        run: |
          echo "‚ö° Measuring production performance..."
          cd apps/landing-page
          ./scripts/performance-check.sh https://tomriddelsdell.com || true

      - name: Create deployment report
        if: always()
        run: |
          echo "## üìä Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | URL | Health Check |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|-----|--------------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            echo "| Staging | ‚úÖ Success | [staging.tomriddelsdell.com](https://staging.tomriddelsdell.com) | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "| Production | ‚úÖ Success | [tomriddelsdell.com](https://tomriddelsdell.com) | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìà Monitoring" >> $GITHUB_STEP_SUMMARY
          echo "- Health checks performed on all deployed environments" >> $GITHUB_STEP_SUMMARY
          echo "- Performance metrics collected and analyzed" >> $GITHUB_STEP_SUMMARY
          echo "- All critical page sections verified" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Health Endpoint](https://tomriddelsdell.com/api/health)" >> $GITHUB_STEP_SUMMARY
          echo "- [Cloudflare Analytics](https://dash.cloudflare.com)" >> $GITHUB_STEP_SUMMARY
          echo "- [Run Manual Health Check](https://github.com/${{ github.repository }}/actions/workflows/deploy-landing-page.yml)" >> $GITHUB_STEP_SUMMARY

      - name: Notify on health check failure
        if: failure()
        run: |
          echo "::error::Post-deployment health checks failed!"
          echo "::error::The deployment may have succeeded, but the site is not responding correctly."
          echo "::error::Please investigate immediately."

      - name: Final summary
        run: |
          echo "‚úÖ All post-deployment verifications complete"
