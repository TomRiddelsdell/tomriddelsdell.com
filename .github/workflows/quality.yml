name: Quality

on:
  workflow_call:
    inputs:
      node-version:
        description: "Node.js version to use"
        required: false
        default: "20"
        type: string
      enforce-formatting:
        description: "Fail if code is not properly formatted"
        required: false
        default: true
        type: boolean

jobs:
  lint:
    name: ESLint Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run ESLint with SARIF output
        run: npm run lint:sarif
        continue-on-error: true

      - name: Upload ESLint results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

  format:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Auto-fix formatting (if not enforcing)
        if: ${{ !inputs.enforce-formatting && failure() }}
        run: |
          npm run format:fix
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --staged --quiet || git commit -m "Auto-fix: Code formatting"

  type-check:
    name: TypeScript Type Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: npm run type-check

      - name: Generate TypeScript build info
        run: npm run type-check:build-info

  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install complexity analysis tools
        run: npm install -g plato complexity-report

      - name: Run complexity analysis
        run: |
          # Generate complexity report for TypeScript files
          find . -name "*.ts" -not -path "./node_modules/*" -not -path "./dist/*" | head -50 > ts-files.txt
          if [ -s ts-files.txt ]; then
            plato -r -d complexity-report $(cat ts-files.txt)
            echo "üìä Complexity analysis completed. Report generated in complexity-report/"
          else
            echo "‚ö†Ô∏è  No TypeScript files found for complexity analysis"
          fi

      - name: Upload complexity report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: complexity-report
          path: complexity-report/
          retention-days: 30

  dependencies-check:
    name: Dependencies Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Check for unused dependencies
        run: |
          npx depcheck --ignores="@types/*,eslint-*,prettier,husky" || true

      - name: Analyze bundle size
        run: |
          if npm list webpack >/dev/null 2>&1; then
            npx webpack-bundle-analyzer dist/stats.json --mode static --report bundle-report.html --no-open
          else
            echo "‚ö†Ô∏è  Webpack not detected, skipping bundle analysis"
          fi

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis
          path: bundle-report.html
          retention-days: 30
