name: üîÑ Dependency Updates & Security

on:
  schedule:
    # Run weekly on Mondays at 8 AM UTC
    - cron: '0 8 * * 1'
  workflow_dispatch:   # Manual trigger
  push:
    paths:
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/dependencies.yml'

env:
  NODE_VERSION: '18.x'

jobs:
  # ============================================================================
  # DEPENDENCY AUDIT - Check for vulnerabilities
  # ============================================================================
  dependency-audit:
    name: üõ°Ô∏è Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --production=false

      - name: üõ°Ô∏è Run npm audit
        run: |
          echo "üõ°Ô∏è Running npm security audit..."
          npm audit --audit-level=moderate > audit-report.txt 2>&1 || true
          
          if npm audit --audit-level=high; then
            echo "‚úÖ No high-severity vulnerabilities found"
          else
            echo "‚ö†Ô∏è High-severity vulnerabilities detected"
            cat audit-report.txt
            
            # Create issue for high-severity vulnerabilities
            echo "create_security_issue=true" >> $GITHUB_ENV
            echo "AUDIT_REPORT<<EOF" >> $GITHUB_ENV
            cat audit-report.txt >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: üîç Check for outdated packages
        run: |
          echo "üîç Checking for outdated packages..."
          npm outdated > outdated-report.txt 2>&1 || true
          
          if [ -s outdated-report.txt ]; then
            echo "üì¶ Outdated packages found:"
            cat outdated-report.txt
            
            echo "OUTDATED_REPORT<<EOF" >> $GITHUB_ENV
            cat outdated-report.txt >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "‚úÖ All packages are up to date"
          fi

      - name: üö® Create security issue
        if: env.create_security_issue == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const auditReport = process.env.AUDIT_REPORT;
            const outdatedReport = process.env.OUTDATED_REPORT || 'No outdated packages detected.';
            
            const body = `# üö® Security Alert: High-Severity Vulnerabilities Detected
            
            Automated security audit has detected high-severity vulnerabilities in dependencies.
            
            ## üõ°Ô∏è Audit Report
            \`\`\`
            ${auditReport}
            \`\`\`
            
            ## üì¶ Outdated Packages
            \`\`\`
            ${outdatedReport}
            \`\`\`
            
            ## üîß Recommended Actions
            1. Review the vulnerabilities above
            2. Update affected packages: \`npm update\`
            3. For breaking changes, test thoroughly in staging
            4. Run \`npm audit fix\` for automatic fixes
            
            ## üöÄ Quick Fix Commands
            \`\`\`bash
            # Automatic fixes (non-breaking)
            npm audit fix
            
            # Force fixes (potentially breaking)
            npm audit fix --force
            
            # Manual updates
            npm update
            \`\`\`
            
            ---
            *This issue was created automatically by the security audit workflow.*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Security Alert: High-Severity Vulnerabilities Detected',
              body: body,
              labels: ['security', 'dependencies', 'high-priority']
            });

  # ============================================================================
  # DEPENDENCY UPDATES - Automated dependency updates
  # ============================================================================
  dependency-updates:
    name: üì¶ Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --production=false

      - name: üì¶ Update dependencies
        run: |
          echo "üì¶ Updating patch and minor versions..."
          
          # Update patch versions (safe updates)
          npm update --save
          
          # Check if any updates were made
          if git diff --quiet package.json package-lock.json; then
            echo "‚úÖ No dependency updates available"
            echo "no_updates=true" >> $GITHUB_ENV
          else
            echo "üì¶ Dependencies updated successfully"
            echo "updates_available=true" >> $GITHUB_ENV
          fi

      - name: üß™ Test updated dependencies
        if: env.updates_available == 'true'
        run: |
          echo "üß™ Testing updated dependencies..."
          
          # Run tests to ensure updates don't break anything
          npm run test
          
          # Test build process
          npm run build
          
          echo "‚úÖ All tests passed with updated dependencies"

      - name: üìù Generate update report
        if: env.updates_available == 'true'
        run: |
          echo "üìù Generating dependency update report..."
          
          # Get the changes
          git diff --name-only > changed-files.txt
          
          # Generate detailed diff
          git diff package.json > package-diff.txt || true
          git diff package-lock.json > lock-diff.txt || true
          
          # Create summary
          cat > update-summary.md << 'EOF'
          # üì¶ Automated Dependency Updates
          
          This PR contains automated dependency updates for patch and minor versions.
          
          ## üîÑ Changes Made
          - Updated package.json with latest compatible versions
          - Updated package-lock.json with resolved dependencies
          - All tests pass with updated dependencies
          
          ## ‚úÖ Verification
          - [x] Tests passed
          - [x] Build successful
          - [x] No breaking changes detected
          
          ## üìä Package Changes
          ```diff
          EOF
          
          # Add package.json diff if it exists
          if [ -s package-diff.txt ]; then
            cat package-diff.txt >> update-summary.md
          fi
          
          echo '```' >> update-summary.md
          echo '' >> update-summary.md
          echo '---' >> update-summary.md
          echo '*This PR was created automatically by the dependency update workflow.*' >> update-summary.md

      - name: üîÄ Create Pull Request
        if: env.updates_available == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            üì¶ chore: update dependencies
            
            - Updated patch and minor versions
            - All tests passing
            - No breaking changes
          title: 'üì¶ Automated Dependency Updates'
          body-path: update-summary.md
          branch: automated/dependency-updates
          delete-branch: true
          labels: |
            dependencies
            automated
            patch
          reviewers: |
            TomRiddelsdell
          assignees: |
            TomRiddelsdell

  # ============================================================================
  # LICENSE COMPLIANCE - Check license compatibility
  # ============================================================================
  license-compliance:
    name: ‚öñÔ∏è License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --production=false

      - name: ‚öñÔ∏è Check licenses
        run: |
          echo "‚öñÔ∏è Checking license compliance..."
          
          # Install license checker
          npm install -g license-checker
          
          # Generate license report
          license-checker --summary > license-summary.txt
          license-checker --json > license-details.json
          
          echo "üìÑ License Summary:"
          cat license-summary.txt
          
          # Check for problematic licenses
          if license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense;WTFPL' --excludePackages 'tomriddelsdell.com'; then
            echo "‚úÖ All licenses are compatible"
          else
            echo "‚ö†Ô∏è Potentially incompatible licenses detected"
            echo "license_issues=true" >> $GITHUB_ENV
          fi

      - name: üìÑ Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: |
            license-summary.txt
            license-details.json
          retention-days: 90

      - name: ‚ö†Ô∏è Create license compliance issue
        if: env.license_issues == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('license-summary.txt', 'utf8');
            
            const body = `# ‚öñÔ∏è License Compliance Alert
            
            Automated license check has detected potentially incompatible licenses.
            
            ## üìÑ License Summary
            \`\`\`
            ${summary}
            \`\`\`
            
            ## üîß Recommended Actions
            1. Review the licenses listed above
            2. Replace packages with incompatible licenses
            3. Seek legal advice if needed
            4. Update license allowlist if appropriate
            
            ## üìã Acceptable Licenses
            - MIT
            - Apache-2.0
            - BSD-2-Clause
            - BSD-3-Clause
            - ISC
            - Unlicense
            - WTFPL
            
            ---
            *This issue was created automatically by the license compliance workflow.*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚öñÔ∏è License Compliance Alert: Review Required',
              body: body,
              labels: ['legal', 'compliance', 'review-required']
            });

  # ============================================================================
  # PERFORMANCE MONITORING - Track bundle sizes and performance
  # ============================================================================
  performance-monitoring:
    name: üìä Performance Monitoring
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --production=false

      - name: üèóÔ∏è Build application
        run: |
          echo "üèóÔ∏è Building application for performance analysis..."
          npm run build
          npm run build:lambda

      - name: üìä Analyze bundle sizes
        run: |
          echo "üìä Analyzing bundle sizes..."
          
          # Frontend bundle analysis
          if [ -d "dist/assets" ]; then
            echo "Frontend Bundle Sizes:" > bundle-analysis.txt
            find dist/assets -name "*.js" -exec ls -lh {} \; | awk '{print $5, $9}' >> bundle-analysis.txt
            find dist/assets -name "*.css" -exec ls -lh {} \; | awk '{print $5, $9}' >> bundle-analysis.txt
          fi
          
          # Backend bundle analysis
          if [ -f "dist/index.js" ]; then
            echo "Backend Bundle Size:" >> bundle-analysis.txt
            ls -lh dist/index.js | awk '{print $5, $9}' >> bundle-analysis.txt
          fi
          
          # Lambda bundle analysis
          if [ -f "dist/lambda/index.mjs" ]; then
            echo "Lambda Bundle Size:" >> bundle-analysis.txt
            ls -lh dist/lambda/index.mjs | awk '{print $5, $9}' >> bundle-analysis.txt
          fi
          
          echo "üìä Bundle Analysis Complete:"
          cat bundle-analysis.txt

      - name: üìà Track performance metrics
        run: |
          echo "üìà Tracking performance metrics..."
          
          # Calculate total bundle size
          TOTAL_SIZE=$(find dist -type f \( -name "*.js" -o -name "*.css" -o -name "*.mjs" \) -exec du -b {} \; | awk '{sum += $1} END {print sum}')
          TOTAL_SIZE_MB=$(echo "scale=2; $TOTAL_SIZE / 1024 / 1024" | bc -l)
          
          echo "Total Bundle Size: ${TOTAL_SIZE_MB}MB" >> bundle-analysis.txt
          
          # Performance targets
          if (( $(echo "$TOTAL_SIZE_MB > 5" | bc -l) )); then
            echo "‚ö†Ô∏è Bundle size exceeds 5MB target"
            echo "performance_warning=true" >> $GITHUB_ENV
          else
            echo "‚úÖ Bundle size within acceptable limits"
          fi

      - name: üìÑ Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: bundle-analysis.txt
          retention-days: 90

      - name: ‚ö†Ô∏è Performance warning
        if: env.performance_warning == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const analysis = fs.readFileSync('bundle-analysis.txt', 'utf8');
            
            const body = `# üìä Performance Warning: Bundle Size Alert
            
            The application bundle size has exceeded the recommended 5MB limit.
            
            ## üì¶ Bundle Analysis
            \`\`\`
            ${analysis}
            \`\`\`
            
            ## üîß Optimization Recommendations
            1. **Code Splitting**: Split large bundles into smaller chunks
            2. **Tree Shaking**: Remove unused code with proper tree shaking
            3. **Dynamic Imports**: Use dynamic imports for non-critical code
            4. **Asset Optimization**: Compress images and other assets
            5. **Bundle Analysis**: Use webpack-bundle-analyzer for detailed analysis
            
            ## üìã Performance Targets
            - Frontend Bundle: < 2MB
            - Backend Bundle: < 1MB
            - Lambda Bundle: < 512KB
            - Total Bundle: < 5MB
            
            ---
            *This issue was created automatically by the performance monitoring workflow.*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üìä Performance Alert: Bundle Size Exceeds Limit',
              body: body,
              labels: ['performance', 'optimization', 'review-required']
            });

  # ============================================================================
  # SUMMARY - Provide overall status
  # ============================================================================
  summary:
    name: üìã Summary
    runs-on: ubuntu-latest
    needs: [dependency-audit, dependency-updates, license-compliance, performance-monitoring]
    if: always()
    
    steps:
      - name: üìã Generate summary report
        uses: actions/github-script@v7
        with:
          script: |
            const auditStatus = '${{ needs.dependency-audit.result }}';
            const updatesStatus = '${{ needs.dependency-updates.result }}';
            const licenseStatus = '${{ needs.license-compliance.result }}';
            const performanceStatus = '${{ needs.performance-monitoring.result }}';
            
            let summary = '# üîÑ Dependency & Security Summary\n\n';
            
            const getEmoji = (status) => {
              switch(status) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚è∏Ô∏è';
                case 'skipped': return '‚è≠Ô∏è';
                default: return '‚ùì';
              }
            };
            
            summary += `${getEmoji(auditStatus)} **Security Audit**: ${auditStatus}\n`;
            summary += `${getEmoji(updatesStatus)} **Dependency Updates**: ${updatesStatus}\n`;
            summary += `${getEmoji(licenseStatus)} **License Compliance**: ${licenseStatus}\n`;
            summary += `${getEmoji(performanceStatus)} **Performance Monitoring**: ${performanceStatus}\n`;
            
            summary += `\n**Workflow Run**: ${{ github.run_number }}`;
            summary += `\n**Timestamp**: ${new Date().toISOString()}`;
            
            console.log(summary);
