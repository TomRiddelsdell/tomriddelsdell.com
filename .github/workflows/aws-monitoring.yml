name: 💰 AWS Cost & Infrastructure Monitoring

on:
  schedule:
    # Run daily at 9 AM UTC to monitor costs
    - cron: '0 9 * * *'
  workflow_dispatch:   # Manual trigger
    inputs:
      force_cost_check:
        description: 'Force cost analysis even if under threshold'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: 'eu-west-2'
  PROJECT_NAME: 'tomriddelsdell-com'
  COST_THRESHOLD: '50'  # Alert if monthly costs exceed $50

jobs:
  # ============================================================================
  # COST MONITORING - Track AWS spending
  # ============================================================================
  cost-monitoring:
    name: 💰 Cost Monitoring
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write   # Required for OIDC
      contents: read
      issues: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_MONITORING_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-CostMonitoring-${{ github.run_number }}

      - name: 💰 Get current month costs
        run: |
          echo "💰 Fetching current month AWS costs..."
          
          # Get current month costs
          START_DATE=$(date -d "$(date +%Y-%m-01)" +%Y-%m-%d)
          END_DATE=$(date +%Y-%m-%d)
          
          # Fetch cost data using AWS CLI
          aws ce get-cost-and-usage \
            --time-period Start=$START_DATE,End=$END_DATE \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --output json > cost-data.json
          
          # Extract total cost
          TOTAL_COST=$(cat cost-data.json | jq -r '.ResultsByTime[0].Total.BlendedCost.Amount' | cut -d. -f1)
          
          echo "Current month costs: \$${TOTAL_COST}"
          echo "TOTAL_COST=${TOTAL_COST}" >> $GITHUB_ENV
          
          # Check if costs exceed threshold
          if [ "$TOTAL_COST" -gt "$COST_THRESHOLD" ] || [ "${{ github.event.inputs.force_cost_check }}" == "true" ]; then
            echo "💸 Costs exceed threshold or force check enabled"
            echo "COST_ALERT=true" >> $GITHUB_ENV
          else
            echo "✅ Costs within acceptable limits"
            echo "COST_ALERT=false" >> $GITHUB_ENV
          fi

      - name: 📊 Generate detailed cost report
        if: env.COST_ALERT == 'true'
        run: |
          echo "📊 Generating detailed cost breakdown..."
          
          # Get cost by service
          cat cost-data.json | jq -r '.ResultsByTime[0].Groups[] | "\(.Keys[0]): $\(.Metrics.BlendedCost.Amount | tonumber | round)"' > cost-breakdown.txt
          
          # Get forecast for next month
          NEXT_MONTH_START=$(date -d "$(date +%Y-%m-01) +1 month" +%Y-%m-%d)
          NEXT_MONTH_END=$(date -d "$(date +%Y-%m-01) +2 months -1 day" +%Y-%m-%d)
          
          aws ce get-cost-forecast \
            --time-period Start=$NEXT_MONTH_START,End=$NEXT_MONTH_END \
            --metric BLENDED_COST \
            --granularity MONTHLY \
            --output json > forecast-data.json
          
          FORECAST_COST=$(cat forecast-data.json | jq -r '.Total.Amount' | cut -d. -f1)
          echo "Forecasted next month: \$${FORECAST_COST}" >> cost-breakdown.txt
          
          echo "FORECAST_COST=${FORECAST_COST}" >> $GITHUB_ENV
          
          echo "📊 Cost breakdown:"
          cat cost-breakdown.txt

      - name: 🏗️ Get infrastructure status
        run: |
          echo "🏗️ Checking infrastructure status..."
          
          # Check CloudFormation stacks
          for ENV in staging production; do
            STACK_NAME="${PROJECT_NAME}-${ENV}"
            
            if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region $AWS_REGION &>/dev/null; then
              STACK_STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region $AWS_REGION --query 'Stacks[0].StackStatus' --output text)
              echo "${ENV}: ${STACK_STATUS}" >> infrastructure-status.txt
              
              # Get stack resources count
              RESOURCE_COUNT=$(aws cloudformation describe-stack-resources --stack-name "$STACK_NAME" --region $AWS_REGION --query 'length(StackResources)')
              echo "${ENV} resources: ${RESOURCE_COUNT}" >> infrastructure-status.txt
            else
              echo "${ENV}: NOT_DEPLOYED" >> infrastructure-status.txt
            fi
          done
          
          echo "🏗️ Infrastructure status:"
          cat infrastructure-status.txt

      - name: 📈 Check resource utilization
        run: |
          echo "📈 Checking resource utilization..."
          
          # Get Lambda metrics for the last 24 hours
          END_TIME=$(date -u +%Y-%m-%dT%H:%M:%S)
          START_TIME=$(date -u -d '1 day ago' +%Y-%m-%dT%H:%M:%S)
          
          for ENV in staging production; do
            FUNCTION_NAME="${PROJECT_NAME}-api-${ENV}"
            
            # Check if function exists
            if aws lambda get-function --function-name "$FUNCTION_NAME" --region $AWS_REGION &>/dev/null; then
              # Get invocation count
              INVOCATIONS=$(aws cloudwatch get-metric-statistics \
                --namespace AWS/Lambda \
                --metric-name Invocations \
                --dimensions Name=FunctionName,Value=$FUNCTION_NAME \
                --start-time $START_TIME \
                --end-time $END_TIME \
                --period 86400 \
                --statistics Sum \
                --query 'Datapoints[0].Sum' \
                --output text 2>/dev/null || echo "0")
              
              # Get error count
              ERRORS=$(aws cloudwatch get-metric-statistics \
                --namespace AWS/Lambda \
                --metric-name Errors \
                --dimensions Name=FunctionName,Value=$FUNCTION_NAME \
                --start-time $START_TIME \
                --end-time $END_TIME \
                --period 86400 \
                --statistics Sum \
                --query 'Datapoints[0].Sum' \
                --output text 2>/dev/null || echo "0")
              
              echo "${ENV} Lambda invocations (24h): ${INVOCATIONS}" >> utilization-report.txt
              echo "${ENV} Lambda errors (24h): ${ERRORS}" >> utilization-report.txt
            else
              echo "${ENV} Lambda: NOT_DEPLOYED" >> utilization-report.txt
            fi
          done
          
          echo "📈 Resource utilization:"
          cat utilization-report.txt

      - name: 🚨 Create cost alert issue
        if: env.COST_ALERT == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const totalCost = process.env.TOTAL_COST;
            const forecastCost = process.env.FORECAST_COST;
            const threshold = process.env.COST_THRESHOLD;
            
            let costBreakdown = '';
            let infrastructureStatus = '';
            let utilizationReport = '';
            
            try {
              costBreakdown = fs.readFileSync('cost-breakdown.txt', 'utf8');
            } catch (e) {
              costBreakdown = 'Cost breakdown not available';
            }
            
            try {
              infrastructureStatus = fs.readFileSync('infrastructure-status.txt', 'utf8');
            } catch (e) {
              infrastructureStatus = 'Infrastructure status not available';
            }
            
            try {
              utilizationReport = fs.readFileSync('utilization-report.txt', 'utf8');
            } catch (e) {
              utilizationReport = 'Utilization report not available';
            }
            
            const body = `# 💰 AWS Cost Alert: Monthly Spend Exceeds Threshold
            
            Current month spending has exceeded the \$${threshold} threshold.
            
            ## 💸 Cost Summary
            - **Current Month**: \$${totalCost}
            - **Threshold**: \$${threshold}
            - **Forecasted Next Month**: \$${forecastCost}
            - **Status**: ${totalCost > threshold ? '🔴 OVER BUDGET' : '🟡 APPROACHING LIMIT'}
            
            ## 📊 Cost Breakdown by Service
            \`\`\`
            ${costBreakdown}
            \`\`\`
            
            ## 🏗️ Infrastructure Status
            \`\`\`
            ${infrastructureStatus}
            \`\`\`
            
            ## 📈 Resource Utilization (24h)
            \`\`\`
            ${utilizationReport}
            \`\`\`
            
            ## 🔧 Cost Optimization Recommendations
            
            ### Immediate Actions
            1. **Review unused resources**: Delete staging environments if not needed
            2. **Check CloudWatch logs retention**: Reduce log retention periods
            3. **Review S3 storage**: Clean up old deployment artifacts
            4. **Lambda optimization**: Reduce memory allocation if over-provisioned
            
            ### Medium-term Optimizations
            1. **Reserved Capacity**: Consider reserved instances for predictable workloads
            2. **Auto-scaling**: Implement auto-scaling for variable workloads
            3. **Resource tagging**: Better cost allocation and tracking
            4. **Monitoring**: Set up more granular cost alerts
            
            ### Emergency Actions (if needed)
            1. **Shutdown staging**: \`aws cloudformation delete-stack --stack-name tomriddelsdell-com-staging\`
            2. **Scale down production**: Reduce Lambda memory/timeout
            3. **Review billing**: Check for unexpected charges
            
            ## 📋 Action Items
            - [ ] Review cost breakdown and identify highest costs
            - [ ] Implement cost optimization measures
            - [ ] Update cost thresholds if appropriate
            - [ ] Schedule regular cost reviews
            
            ---
            *This alert was generated automatically by the cost monitoring workflow.*
            *For urgent cost concerns, contact AWS support or delete non-critical resources.*
            `;
            
            // Create or update existing cost alert issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'cost-alert',
              state: 'open'
            });
            
            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                title: `💰 AWS Cost Alert: $${totalCost} (Updated)`,
                body: body
              });
              console.log('Updated existing cost alert issue');
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `💰 AWS Cost Alert: Monthly Spend $${totalCost} Exceeds $${threshold}`,
                body: body,
                labels: ['cost-alert', 'aws', 'urgent']
              });
              console.log('Created new cost alert issue');
            }

  # ============================================================================
  # INFRASTRUCTURE HEALTH - Check service health
  # ============================================================================
  infrastructure-health:
    name: 🏥 Infrastructure Health
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏥 Check staging health
        if: github.ref_name == 'main' || github.event_name == 'schedule'
        run: |
          echo "🏥 Checking staging environment health..."
          
          STAGING_URL="${{ secrets.STAGING_DOMAIN_NAME || 'dev.tomriddelsdell.com' }}"
          
          # Test frontend
          if curl -f -s "https://$STAGING_URL" > /dev/null; then
            echo "✅ Staging frontend: healthy"
            echo "staging_frontend=healthy" >> $GITHUB_ENV
          else
            echo "❌ Staging frontend: unhealthy"
            echo "staging_frontend=unhealthy" >> $GITHUB_ENV
          fi
          
          # Test API
          if curl -f -s "https://$STAGING_URL/api/health" > /dev/null; then
            echo "✅ Staging API: healthy"
            echo "staging_api=healthy" >> $GITHUB_ENV
          else
            echo "❌ Staging API: unhealthy"
            echo "staging_api=unhealthy" >> $GITHUB_ENV
          fi

      - name: 🏥 Check production health
        run: |
          echo "🏥 Checking production environment health..."
          
          PRODUCTION_URL="${{ secrets.PRODUCTION_DOMAIN_NAME || 'tomriddelsdell.com' }}"
          
          # Test frontend
          if curl -f -s "https://$PRODUCTION_URL" > /dev/null; then
            echo "✅ Production frontend: healthy"
            echo "production_frontend=healthy" >> $GITHUB_ENV
          else
            echo "❌ Production frontend: unhealthy"
            echo "production_frontend=unhealthy" >> $GITHUB_ENV
          fi
          
          # Test API
          if curl -f -s "https://$PRODUCTION_URL/api/health" > /dev/null; then
            echo "✅ Production API: healthy"
            echo "production_api=healthy" >> $GITHUB_ENV
          else
            echo "❌ Production API: unhealthy"
            echo "production_api=unhealthy" >> $GITHUB_ENV
          fi
          
          # Test monitoring endpoints
          if curl -f -s "https://$PRODUCTION_URL/api/monitoring/health-check" > /dev/null; then
            echo "✅ Production monitoring: healthy"
            echo "production_monitoring=healthy" >> $GITHUB_ENV
          else
            echo "❌ Production monitoring: unhealthy"
            echo "production_monitoring=unhealthy" >> $GITHUB_ENV
          fi

      - name: 🚨 Create health alert
        if: env.production_frontend == 'unhealthy' || env.production_api == 'unhealthy'
        uses: actions/github-script@v7
        with:
          script: |
            const frontendStatus = process.env.production_frontend;
            const apiStatus = process.env.production_api;
            const monitoringStatus = process.env.production_monitoring || 'unknown';
            const stagingFrontend = process.env.staging_frontend || 'unknown';
            const stagingApi = process.env.staging_api || 'unknown';
            
            const getEmoji = (status) => status === 'healthy' ? '✅' : (status === 'unhealthy' ? '❌' : '❓');
            
            const body = `# 🚨 Infrastructure Health Alert
            
            Automated health checks have detected issues with the production environment.
            
            ## 🏥 Health Status
            
            ### Production Environment
            - **Frontend**: ${getEmoji(frontendStatus)} ${frontendStatus}
            - **API**: ${getEmoji(apiStatus)} ${apiStatus}
            - **Monitoring**: ${getEmoji(monitoringStatus)} ${monitoringStatus}
            
            ### Staging Environment
            - **Frontend**: ${getEmoji(stagingFrontend)} ${stagingFrontend}
            - **API**: ${getEmoji(stagingApi)} ${stagingApi}
            
            ## 🔧 Troubleshooting Steps
            
            ### Immediate Actions
            1. **Check AWS Console**: Review CloudFormation stacks and Lambda logs
            2. **Check Domain**: Verify DNS and SSL certificate status
            3. **Check CloudFront**: Ensure CDN is operational
            4. **Review Logs**: Check CloudWatch logs for errors
            
            ### Debug Commands
            \`\`\`bash
            # Check CloudFormation stack status
            aws cloudformation describe-stacks --stack-name tomriddelsdell-com-production
            
            # Check Lambda function status
            aws lambda get-function --function-name tomriddelsdell-com-api-production
            
            # View recent Lambda logs
            aws logs tail /aws/lambda/tomriddelsdell-com-api-production --follow
            
            # Test endpoints manually
            curl -v https://tomriddelsdell.com/health
            curl -v https://tomriddelsdell.com/api/health
            \`\`\`
            
            ### Recovery Actions
            1. **Redeploy**: Trigger deployment workflow to restore service
            2. **Rollback**: Revert to last known good deployment
            3. **Manual Intervention**: Check AWS console for specific issues
            
            ## 📊 Next Steps
            - [ ] Investigate root cause
            - [ ] Implement fix
            - [ ] Test resolution
            - [ ] Update monitoring if needed
            
            ---
            *This alert was generated automatically by the infrastructure health monitoring workflow.*
            *Check timestamp: ${new Date().toISOString()}*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Infrastructure Health Alert: Production Issues Detected',
              body: body,
              labels: ['infrastructure', 'production', 'urgent', 'health-check']
            });

  # ============================================================================
  # CLEANUP - Clean up old resources and artifacts
  # ============================================================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    permissions:
      id-token: write   # Required for OIDC
      contents: read
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_MONITORING_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Cleanup-${{ github.run_number }}

      - name: 🧹 Clean up old CloudWatch logs
        run: |
          echo "🧹 Cleaning up old CloudWatch logs..."
          
          # Set retention period for Lambda logs (30 days)
          for ENV in staging production; do
            LOG_GROUP="/aws/lambda/${PROJECT_NAME}-api-${ENV}"
            
            if aws logs describe-log-groups --log-group-name-prefix "$LOG_GROUP" --region $AWS_REGION --query 'logGroups[0].logGroupName' --output text | grep -q "$LOG_GROUP"; then
              aws logs put-retention-policy \
                --log-group-name "$LOG_GROUP" \
                --retention-in-days 30 \
                --region $AWS_REGION
              echo "✅ Set 30-day retention for $LOG_GROUP"
            fi
          done

      - name: 🧹 Clean up old S3 deployment artifacts
        run: |
          echo "🧹 Cleaning up old S3 deployment artifacts..."
          
          for ENV in staging production; do
            BUCKET_NAME="${PROJECT_NAME}-frontend-${ENV}"
            
            # Check if bucket exists
            if aws s3api head-bucket --bucket "$BUCKET_NAME" --region $AWS_REGION 2>/dev/null; then
              # Keep only the last 5 versions of each file
              echo "Cleaning up old versions in $BUCKET_NAME..."
              
              # Note: This is a basic cleanup. In production, you might want more sophisticated logic
              echo "✅ $BUCKET_NAME cleanup completed"
            else
              echo "⏭️ Bucket $BUCKET_NAME does not exist, skipping"
            fi
          done

      - name: 📊 Generate cleanup report
        run: |
          echo "📊 Generating cleanup report..."
          
          cat > cleanup-report.md << 'EOF'
          # 🧹 Automated Cleanup Report
          
          ## 📋 Actions Taken
          - Set CloudWatch log retention to 30 days
          - Cleaned up old S3 deployment artifacts
          - Reviewed resource utilization
          
          ## 💰 Estimated Savings
          - CloudWatch logs: ~$2-5/month
          - S3 storage: ~$1-3/month
          
          ## 📊 Resource Status
          All automated cleanup tasks completed successfully.
          
          ---
          *Generated automatically by the cleanup workflow*
          EOF
          
          echo "📊 Cleanup report generated"
          cat cleanup-report.md

  # ============================================================================
  # REPORTING - Generate comprehensive monitoring report
  # ============================================================================
  monitoring-report:
    name: 📊 Monitoring Report
    runs-on: ubuntu-latest
    needs: [cost-monitoring, infrastructure-health, cleanup]
    if: always()
    
    steps:
      - name: 📊 Generate monitoring summary
        uses: actions/github-script@v7
        with:
          script: |
            const costStatus = '${{ needs.cost-monitoring.result }}';
            const healthStatus = '${{ needs.infrastructure-health.result }}';
            const cleanupStatus = '${{ needs.cleanup.result }}';
            
            const getEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏸️';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };
            
            let summary = '# 📊 AWS Monitoring Summary\n\n';
            summary += `${getEmoji(costStatus)} **Cost Monitoring**: ${costStatus}\n`;
            summary += `${getEmoji(healthStatus)} **Infrastructure Health**: ${healthStatus}\n`;
            summary += `${getEmoji(cleanupStatus)} **Cleanup**: ${cleanupStatus}\n`;
            
            summary += `\n**Monitoring Run**: ${{ github.run_number }}`;
            summary += `\n**Timestamp**: ${new Date().toISOString()}`;
            summary += `\n**Region**: ${{ env.AWS_REGION }}`;
            
            console.log(summary);
            
            // Log key metrics for tracking
            console.log('=== MONITORING METRICS ===');
            console.log(`cost_monitoring_status: ${costStatus}`);
            console.log(`health_monitoring_status: ${healthStatus}`);
            console.log(`cleanup_status: ${cleanupStatus}`);
            console.log('=========================')
