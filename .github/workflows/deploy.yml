name: Deploy

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10"

jobs:
  # Detect what changed to optimize deployments
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      landing-page: ${{ steps.filter.outputs.landing-page }}
      any-changes: ${{ steps.filter.outputs.any-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for landing page changes
        id: filter
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "push" ]; then
            if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
              # First push to branch - check all files
              CHANGED_FILES=$(git ls-files)
            else
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})
            fi
          else
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check for landing page changes
          if echo "$CHANGED_FILES" | grep -qE '^apps/landing-page/|^\.github/workflows/deploy\.yml'; then
            echo "landing-page=true" >> $GITHUB_OUTPUT
            echo "any-changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Landing page changes detected"
          else
            echo "landing-page=false" >> $GITHUB_OUTPUT
            echo "any-changes=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è  No landing page changes detected"
          fi

  # Quality gates for landing page
  quality-gates:
    name: Quality Gates - Landing Page
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.landing-page == 'true'
    defaults:
      run:
        working-directory: apps/landing-page
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: apps/landing-page/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run type-check

      - name: Lint
        run: pnpm run lint

      - name: Unit tests
        run: pnpm run test:unit
        env:
          CI: true

      - name: Build test
        run: pnpm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENV: staging

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-gates]
    if: |
      needs.detect-changes.outputs.landing-page == 'true' &&
      github.ref == 'refs/heads/develop' && 
      github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.tomriddelsdell.com
    defaults:
      run:
        working-directory: apps/landing-page
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: apps/landing-page/pnpm-lock.yaml

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for staging
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_STG }}
        run: |
          doppler run --project tomriddelsdell-infra --config stg -- pnpm run build:staging

      - name: Deploy to Cloudflare Pages (Staging)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          npx wrangler pages deploy out \
            --project-name=landing-page-8t9 \
            --branch=develop \
            --commit-dirty=true

      - name: Wait for deployment
        run: sleep 30

      - name: Health check staging
        run: |
          echo "üè• Checking staging deployment health..."
          MAX_ATTEMPTS=10
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://staging.tomriddelsdell.com || echo "000")
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "‚úÖ Staging site is healthy (HTTP $HTTP_CODE)"
              exit 0
            elif [ "$HTTP_CODE" = "000" ]; then
              echo "‚ö†Ô∏è  Unable to connect, retrying..."
            else
              echo "‚ö†Ô∏è  Received HTTP $HTTP_CODE, retrying..."
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            [ $ATTEMPT -le $MAX_ATTEMPTS ] && sleep 10
          done
          
          echo "‚ùå Health check failed after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "## üöÄ Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://staging.tomriddelsdell.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** develop" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.changes.outputs.apps }}
      services: ${{ steps.changes.outputs.services }}
      infra: ${{ steps.changes.outputs.infra }}
      any-changes: ${{ steps.changes.outputs.any-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})
          else
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Detect changed apps
          CHANGED_APPS=$(echo "$CHANGED_FILES" | grep '^apps/' | cut -d'/' -f2 | sort -u | tr '\n' ' ')
          CHANGED_SERVICES=$(echo "$CHANGED_FILES" | grep '^services/' | cut -d'/' -f2 | sort -u | tr '\n' ' ')

          # Check for infrastructure changes
          INFRA_CHANGES=$(echo "$CHANGED_FILES" | grep -E '^(infra/|\.github/workflows/|Makefile|deploy/)' | wc -l)

          # Set outputs
          echo "apps=${CHANGED_APPS}" >> $GITHUB_OUTPUT
          echo "services=${CHANGED_SERVICES}" >> $GITHUB_OUTPUT
          echo "infra=${INFRA_CHANGES}" >> $GITHUB_OUTPUT

          if [ -n "$CHANGED_APPS" ] || [ -n "$CHANGED_SERVICES" ] || [ "$INFRA_CHANGES" -gt 0 ]; then
            echo "any-changes=true" >> $GITHUB_OUTPUT
          else
            echo "any-changes=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: [test, security, detect-changes]
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.any-changes == 'true' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        environment: [staging, production]
        exclude:
          - environment: production
            ref: ${{ github.ref != 'refs/heads/main' }}
          - environment: staging
            ref: ${{ github.ref != 'refs/heads/develop' }}

    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          # Install required CLI tools
          sudo apt-get update
          sudo apt-get install -y make jq

          # Install Doppler CLI
          curl -Ls --tlsv1.2 --proto "=https" --retry 3 https://cli.doppler.com/install.sh | sudo sh

          # Install Wrangler CLI
          npm install -g wrangler@latest

          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Authenticate with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_SERVICE_TOKEN }}
        run: |
          doppler configure set token $DOPPLER_TOKEN
          doppler configure set project copilot-monorepo
          doppler configure set config ${{ matrix.environment }}

      - name: Deploy infrastructure changes
        if: needs.detect-changes.outputs.infra > 0
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_SERVICE_TOKEN }}
        run: |
          echo "üèóÔ∏è Deploying infrastructure changes..."
          ENV=${{ matrix.environment }} make deploy-infra

      - name: Deploy changed applications
        id: deploy
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_SERVICE_TOKEN }}
        run: |
          ENV=${{ matrix.environment }}

          # Deploy changed apps
          if [ -n "${{ needs.detect-changes.outputs.apps }}" ]; then
            for app in ${{ needs.detect-changes.outputs.apps }}; do
              echo "üöÄ Deploying app: $app"
              make deploy-app APP=$app ENV=$ENV
            done
          fi

          # Deploy changed services
          if [ -n "${{ needs.detect-changes.outputs.services }}" ]; then
            for service in ${{ needs.detect-changes.outputs.services }}; do
              echo "üöÄ Deploying service: $service"
              make deploy-service SERVICE=$service ENV=$ENV
            done
          fi

          # Output deployment URL for environment
          echo "url=https://${{ matrix.environment }}.example.com" >> $GITHUB_OUTPUT

      - name: Run health checks
        run: |
          ENV=${{ matrix.environment }}

          # Health check deployed apps
          if [ -n "${{ needs.detect-changes.outputs.apps }}" ]; then
            for app in ${{ needs.detect-changes.outputs.apps }}; do
              echo "üè• Health checking app: $app"
              make health-check-app APP=$app ENV=$ENV
            done
          fi

          # Health check deployed services
          if [ -n "${{ needs.detect-changes.outputs.services }}" ]; then
            for service in ${{ needs.detect-changes.outputs.services }}; do
              echo "üè• Health checking service: $service"
              make health-check-service SERVICE=$service ENV=$ENV
            done
          fi
