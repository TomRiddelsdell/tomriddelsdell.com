FROM python:3.10-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install uv for faster dependency management
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.local/bin:$PATH"

# Create working directory
WORKDIR /app

# Install AWS API MCP server using recommended method
RUN uv pip install --system awslabs.aws-api-mcp-server

# Install additional dependencies for HTTP server
RUN uv pip install --system fastapi uvicorn

# Create a simple HTTP wrapper for the MCP server
WORKDIR /app
COPY <<EOF server.py
import asyncio
import subprocess
import json
import sys
from datetime import datetime
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import uvicorn

app = FastAPI()

class ExecuteRequest(BaseModel):
    command: str
    args: List[str] = []

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "aws-api-mcp-server",
        "timestamp": datetime.now().isoformat()
    }

@app.post("/mcp/execute")
async def execute_mcp_command(request: ExecuteRequest):
    try:
        # For now, we'll use a simple command execution
        # In a real implementation, this would interface with the MCP server
        cmd = [request.command] + request.args
        
        process = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if process.returncode == 0:
            try:
                result = json.loads(process.stdout)
                return {"success": True, "data": result}
            except json.JSONDecodeError:
                return {"success": True, "data": process.stdout}
        else:
            raise HTTPException(
                status_code=400, 
                detail={"success": False, "error": process.stderr}
            )
    except subprocess.TimeoutExpired:
        raise HTTPException(
            status_code=408, 
            detail={"success": False, "error": "Command timed out"}
        )
    except Exception as e:
        raise HTTPException(
            status_code=500, 
            detail={"success": False, "error": str(e)}
        )

if __name__ == "__main__":
    print("AWS MCP Server starting on port 8001")
    uvicorn.run(app, host="0.0.0.0", port=8001)
EOF

EXPOSE 8001

CMD ["python", "server.py"]
